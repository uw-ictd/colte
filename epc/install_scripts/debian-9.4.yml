---
- hosts: localhost
  vars:
    coltenv: "{{ ansible_env.COLTENV }}"
    build_epc: "{{ ansible_env.COLTE_EPC }}"

    username: "{{ ansible_env.COLTE_USER }}"
    mysql_password: "{{ ansible_env.COLTE_DBPASS }}"
    colte_dir: "{{ ansible_env.COLTE_DIR }}"

    epc_dir: "{{ colte_dir }}/epc"
    packages_dir: "{{ colte_dir }}/packages"

    enb_iface: "{{ ansible_env.COLTE_ENB_IFACE }}"
    enb_iface_addr: "{{ ansible_env.COLTE_ENB_IFACE_ADDR }}"
    wan_iface: "{{ ansible_env.COLTE_WAN_IFACE }}"
    lte_subnet: "{{ ansible_env.COLTE_LTE_SUBNET }}"

  tasks:
    - name: check for environment vars
      fail: msg="Killing ansible script, environment variables not set! COLTENV = {{ ansible_env.COLTENV }}"
      when: coltenv is not defined

    - name: apt-get update
      apt:
        update_cache: yes
        cache_valid_time: 3600
      become: yes

    - name: pre-configure phpmyadmin
      debconf:
        name: phpmyadmin 
        question: "{{ item.name }}"
        vtype: "{{ item.type }}"
        value: "{{ item.val }}"
      with_items:
        - {name: phpmyadmin/dbconfig-install, type: boolean, val: true}
        - {name: phpmyadmin/app-password-confirm, type: password, val: "{{ mysql_password }}"}
        - {name: phpmyadmin/mysql/admin-pass, type: password, val: "{{ mysql_password }}"}
        - {name: phpmyadmin/mysql/app-pass, type: password, val: "{{ mysql_password }}"}
        - {name: phpmyadmin/reconfigure-webserver, type: multiselect, val: apache2}
      become: yes

    - name: first round of HSS apt install
      apt:
        name: "{{ item }}"
      with_items:
      - autoconf
      - automake
      - bison
      - build-essential
      - cmake
      - cmake-curses-gui
      - doxygen
      - doxygen-gui
      - flex
      - gdb
      - pkg-config
      - git
      - subversion
      - libconfig8-dev
      - libgcrypt11-dev
      - libidn2-0-dev
      - libidn11-dev
      - default-libmysqlclient-dev
      - libpthread-stubs0-dev
      - libsctp1
      - libsctp-dev
      - libssl-dev
      - libtool
      - mysql-client
      - mysql-server
      - openssl
      - nettle-dev
      - nettle-bin
      - python-mysqldb
# (install database and phpmyadmin)
      - php
      - phpmyadmin
      - python-pexpect
      - libapache2-mod-php*
# (first round of MME)
      - castxml
      - guile-2.0-dev
      - libgmp-dev
      - libhogweed?
      - libgtk-3-dev
      - libxml2
      - libxml2-dev
      - mscgen
      - check
      - python
      - libgnutls28-dev
# (second round of MME)
      - ethtool
      - iproute
      - vlan
      - tshark
      - python-dev
      - unzip
      - iperf
      become: yes

    - name: MySQL Configs
      mysql_user:
        name: "{{ username }}"
        password: "{{ mysql_password }}"
        host: localhost
        priv: '*.*:ALL'
      become: yes

    - name: ensure log directory exists
      file:
        path: /var/log/colte
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: 0755
      become: yes

    - name: ensure config directory exists
      file:
        path: /usr/local/etc/colte
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: 0755
      become: yes

    - name: ensure freeDiameter directory exists
      file:
        path: /usr/local/etc/colte/freeDiameter
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: 0755
      become: yes

    - name: symlink for oai scripts (needed until we remake build/run scripts)
      file:
        src: /usr/local/etc/colte
        dest: /usr/local/etc/oai
        state: link
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: 0755
      become: yes

    - import_tasks: tasks/freediameter.yml

    - import_tasks: tasks/asn1c.yml

    - import_tasks: tasks/libgtpnl.yml

    # NEW FOR OAI/DEVELOP BRANCH
    - import_tasks: tasks/liblfds.yml
#    - import_tasks: tasks/ovs.yml

    - name: build epc 
      shell: |
        source oaienv
        ./scripts/build_hss -c
        ./scripts/build_mme -c
        ./scripts/build_spgw -c
      args:
        chdir: "{{ epc_dir }}"

# {{ epc_dir }}/scripts/hss_db_import 127.0.0.1 {{ username }} {{ mysql_password }} colte_db {{ epc_dir }}/spencer_configs/sample_db.sql
    - name: install sample_db into mysql
      mysql_db:
        login_user: "{{ username }}"
        login_password: "{{ mysql_password }}"
        name: colte_db
        state: import
        target: "{{ epc_dir }}/spencer_configs/bokondini.sql"

    - name: synchronize customer table with users table (just in case there are errors)
      shell: "python {{ epc_dir }}/spencer_scripts/synchronize_dbs.py"

    - name: Install synchronize db job on crontab (daily)
      cron:
        name: "Synchronize Database (check for enabled/disabled users)"
        special_time: daily
        job: "{{ epc_dir }}/synchronize_dbs.sh >> /var/log/colte/cron.log 2>&1"
        user: "{{ username }}"
        disabled: "no"
        
    - name: write information to hss.conf
      lineinfile:
        path: "{{ epc_dir }}/spencer_configs/hss.conf"
        regexp: "{{ item.field }}"
        line: "{{ item.line }}"
        # owner: "{{ username }}"
        # group: "{{ username }}"
        # mode: 0644
      with_items:
      - {field: 'MYSQL_pass', line: 'MYSQL_pass   = "{{ mysql_password }}";'}
      - {field: 'MYSQL_user', line: 'MYSQL_user   = "{{ username }}";'}

    - name: write information to mme.conf
      lineinfile:
        path: "{{ epc_dir }}/spencer_configs/mme.conf"
        regexp: "{{ item.field }}"
        line: "{{ item.line }}"
      with_items:
      - {field: "MME_INTERFACE_NAME_FOR_S1_MME", line: "        MME_INTERFACE_NAME_FOR_S1_MME         = \"{{ enb_iface }}\";"}
      - {field: "MME_IPV4_ADDRESS_FOR_S1_MME", line: "        MME_IPV4_ADDRESS_FOR_S1_MME         = \"{{ enb_iface_addr }}\";"}
      # MORE ENTRIES: CAN DYNAMICALLY SET MMC/MNC?!?

    - name: write information to spgw.conf
      lineinfile:
        path: "{{ epc_dir }}/spencer_configs/spgw.conf"
        regexp: "{{ item.field }}"
        line: "{{ item.line }}"
      with_items:
      - {field: "SGW_INTERFACE_NAME_FOR_S1U_S12_S4_UP", line: "        SGW_INTERFACE_NAME_FOR_S1U_S12_S4_UP         = \"{{ enb_iface }}\";"}
      - {field: "SGW_IPV4_ADDRESS_FOR_S1U_S12_S4_UP", line: "        SGW_IPV4_ADDRESS_FOR_S1U_S12_S4_UP         = \"{{ enb_iface_addr }}\";"}
      - {field: "PGW_INTERFACE_NAME_FOR_SGI", line: "        PGW_INTERFACE_NAME_FOR_SGI            = \"{{ wan_iface }}\";"}
      - {field: "IPV4_LIST", line: "        IPV4_LIST = (\"{{ lte_subnet }}\");"}
      - {field: 'MYSQL_pass', line: '    MYSQL_pass   = "{{ mysql_password }}";'}
      - {field: 'MYSQL_user', line: '    MYSQL_user   = "{{ username }}";'}
# SMS TODO: THESE VALUES ARE HARD-CODED WE NEED TO SET THEM TO COLTE'S VALUE IF-AND-ONLY-IF BIND OPTION TURNED ON
      - {field: 'DEFAULT_DNS_IPV4_ADDRESS', line: '    DEFAULT_DNS_IPV4_ADDRESS = "192.168.151.1";'}
      - {field: 'DEFAULT_DNS_SEC_IPV4_ADDRESS', line: '    DEFAULT_DNS_SEC_IPV4_ADDRESS = "192.168.151.1";'}

    - name: copy config files to /usr/local/etc/colte
      copy: 
        src: "{{ item.src }}"
        dest: "{{ item.dst }}"
        # owner: "{{ username }}"
        # group: "{{ username }}"
        # mode: 0644
      # become: yes
      with_items:
      - {src: "{{ epc_dir }}/spencer_configs/hss.conf", dst: "/usr/local/etc/colte/"}
      - {src: "{{ epc_dir }}/spencer_configs/mme.conf", dst: "/usr/local/etc/colte/"}
      # - {src: "{{ epc_dir }}/spencer_configs/mme_fd.conf", dst: "/usr/local/etc/colte/"}
      - {src: "{{ epc_dir }}/spencer_configs/spgw.conf", dst: "/usr/local/etc/colte/"}
      - {src: "{{ epc_dir }}/spencer_configs/freeDiameter/acl.conf", dst: "/usr/local/etc/colte/freeDiameter"}
      - {src: "{{ epc_dir }}/spencer_configs/freeDiameter/hss_fd.conf", dst: "/usr/local/etc/colte/freeDiameter"}
      - {src: "{{ epc_dir }}/spencer_configs/freeDiameter/mme_fd.conf", dst: "/usr/local/etc/colte/freeDiameter"}

    - name: generate s6a certificates
      shell: |
        source {{ epc_dir }}/oaienv
        {{ epc_dir }}/scripts/check_hss_s6a_certificate /usr/local/etc/colte/freeDiameter hss.OpenAir5G.Alliance
        {{ epc_dir }}/scripts/check_mme_s6a_certificate /usr/local/etc/colte/freeDiameter mme.OpenAir5G.Alliance
      # become: yes

    - name: update iptables script with wan_iface
      lineinfile:
        path: "{{ epc_dir }}/spencer_configs/iptables.sh"
        regexp: "{{ item.field }}"
        line: "{{ item.line }}"
      with_items:
      - {field: "-C POSTROUTING -o enp3s0", line: "     iptables -t nat -C POSTROUTING -o {{ wan_iface }} -j MASQUERADE"}
      - {field: "-A POSTROUTING -o enp3s0", line: "     iptables -t nat -A POSTROUTING -o {{ wan_iface }} -j MASQUERADE"}
      - {field: "-C FORWARD -i gtp0 -o enp3s0", line: "     iptables -C FORWARD -i gtp0 -o {{ wan_iface }} -j ACCEPT"}
      - {field: "-A FORWARD -i gtp0 -o enp3s0", line: "     iptables -A FORWARD -i gtp0 -o {{ wan_iface }} -j ACCEPT"}
      - {field: "-C FORWARD -i enp3s0 ", line: "     iptables -C FORWARD -i {{ wan_iface }} -o gtp0 -m state --state RELATED,ESTABLISHED -j ACCEPT"}
      - {field: "-A FORWARD -i enp3s0 ", line: "     iptables -A FORWARD -i {{ wan_iface }} -o gtp0 -m state --state RELATED,ESTABLISHED -j ACCEPT"}

    - name: configure iptables script to run on reboot
      cron:
        name: "configure iptables on reboot"
        special_time: reboot
        job: "{{ epc_dir }}/spencer_configs/iptables.sh >> /var/log/colte/cron.log 2>&1"
      become: yes

    - name: run iptables commands
      shell: "{{ epc_dir }}/spencer_configs/iptables.sh"
      become: yes

    - name: dynamically write hss.service file
      lineinfile:
        path: "{{ epc_dir }}/spencer_scripts/hss.service"
        regexp: "{{ item.field }}"
        line: "{{ item.line }}"
        # owner: "{{ username }}"
        # group: "{{ username }}"
        # mode: 0644
      with_items:
      - {field: 'ExecStart', line: 'ExecStart=/bin/bash -c "{{ epc_dir }}/scripts/run_hss >> /var/log/colte/hss.log 2>&1"'}
      - {field: 'User', line: 'User={{ username }}'}
      - {field: 'Group', line: 'Group={{ username }}'}
      - {field: 'Environment=OPENAIRCN_DIR', line: 'Environment=OPENAIRCN_DIR={{ epc_dir }}'}
      - {field: 'WorkingDirectory', line: 'WorkingDirectory={{ epc_dir }}'}

    - name: dynamically write mme.service file
      lineinfile:
        path: "{{ epc_dir }}/spencer_scripts/mme.service"
        regexp: "{{ item.field }}"
        line: "{{ item.line }}"
        # owner: "{{ username }}"
        # group: "{{ username }}"
        # mode: 0644
      with_items:
      - {field: 'ExecStart', line: 'ExecStart=/bin/bash -c "{{ epc_dir }}/scripts/run_mme >> /var/log/colte/mme.log 2>&1"'}
      - {field: 'User', line: 'User={{ username }}'}
      - {field: 'Group', line: 'Group={{ username }}'}
      - {field: 'Environment=OPENAIRCN_DIR', line: 'Environment=OPENAIRCN_DIR={{ epc_dir }}'}
      - {field: 'WorkingDirectory', line: 'WorkingDirectory={{ epc_dir }}'}

    - name: dynamically write spgw.service file
      lineinfile:
        path: "{{ epc_dir }}/spencer_scripts/spgw.service"
        regexp: "{{ item.field }}"
        line: "{{ item.line }}"
      with_items:
      - {field: 'ExecStart', line: 'ExecStart=/bin/bash -c "{{ epc_dir }}/scripts/run_spgw >> /var/log/colte/spgw.log 2>&1"'}
      - {field: 'User', line: 'User={{ username }}'}
      - {field: 'Group', line: 'Group={{ username }}'}
      - {field: 'Environment=OPENAIRCN_DIR', line: 'Environment=OPENAIRCN_DIR={{ epc_dir }}'}
      - {field: 'WorkingDirectory', line: 'WorkingDirectory={{ epc_dir }}'}

    - name: copy .service files to /etc/systemd/system
      copy: 
        src: "{{ epc_dir }}/spencer_scripts/{{ item }}.service"
        dest: "/etc/systemd/system/{{ item }}.service"
        mode: 0644
      become: yes
      with_items:
      - "hss"
      - "mme"
      - "spgw"
