diff -rcNP linux-4.7-rc7/drivers/net/gtp.c linux-4.7-rc7.patch_dedicated_bearer/drivers/net/gtp.c
*** linux-4.7-rc7/drivers/net/gtp.c	2016-07-26 14:41:36.462877240 +0200
--- linux-4.7-rc7.patch_dedicated_bearer/drivers/net/gtp.c	2017-02-10 08:51:47.773121552 +0100
***************
*** 12,17 ****
--- 12,19 ----
   * as published by the Free Software Foundation; either version
   * 2 of the License, or (at your option) any later version.
   */
+ // EURECOM: TO BE REMOVED
+ #define DEBUG 1
  
  #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
  
***************
*** 55,60 ****
--- 57,63 ----
  	} u;
  	u8			gtp_version;
  	u16			af;
+ 	u8			bearer_id;
  
  	struct in_addr		ms_addr_ip4;
  	struct in_addr		sgsn_addr_ip4;
***************
*** 75,81 ****
  
  	unsigned int		hash_size;
  	struct hlist_head	*tid_hash;
! 	struct hlist_head	*addr_hash;
  };
  
  static int gtp_net_id __read_mostly;
--- 78,84 ----
  
  	unsigned int		hash_size;
  	struct hlist_head	*tid_hash;
! 	struct hlist_head	*addr_ebi_hash;
  };
  
  static int gtp_net_id __read_mostly;
***************
*** 97,105 ****
  	return jhash_1word(tid, gtp_h_initval);
  }
  
! static inline u32 ipv4_hashfn(__be32 ip)
  {
! 	return jhash_1word((__force u32)ip, gtp_h_initval);
  }
  
  /* Resolve a PDP context structure based on the 64bit TID. */
--- 100,108 ----
  	return jhash_1word(tid, gtp_h_initval);
  }
  
! static inline u32 ipv4_ebi_hashfn(__be32 ip, u8 bearer_id)
  {
! 	return jhash_2words((__force u32)ip, (__force u32)bearer_id, gtp_h_initval);
  }
  
  /* Resolve a PDP context structure based on the 64bit TID. */
***************
*** 135,150 ****
  }
  
  /* Resolve a PDP context based on IPv4 address of MS. */
! static struct pdp_ctx *ipv4_pdp_find(struct gtp_dev *gtp, __be32 ms_addr)
  {
  	struct hlist_head *head;
  	struct pdp_ctx *pdp;
  
! 	head = &gtp->addr_hash[ipv4_hashfn(ms_addr) % gtp->hash_size];
  
  	hlist_for_each_entry_rcu(pdp, head, hlist_addr) {
  		if (pdp->af == AF_INET &&
! 		    pdp->ms_addr_ip4.s_addr == ms_addr)
  			return pdp;
  	}
  
--- 138,154 ----
  }
  
  /* Resolve a PDP context based on IPv4 address of MS. */
! static struct pdp_ctx *ipv4_ebi_pdp_find(struct gtp_dev *gtp, __be32 ms_addr, u8 bearer_id)
  {
  	struct hlist_head *head;
  	struct pdp_ctx *pdp;
  
! 	head = &gtp->addr_ebi_hash[ipv4_ebi_hashfn(ms_addr, bearer_id) % gtp->hash_size];
  
  	hlist_for_each_entry_rcu(pdp, head, hlist_addr) {
  		if (pdp->af == AF_INET &&
! 		    pdp->ms_addr_ip4.s_addr == ms_addr &&
! 		    pdp->bearer_id == bearer_id)
  			return pdp;
  	}
  
***************
*** 268,273 ****
--- 272,279 ----
  		ret = -1;
  		goto out_rcu;
  	}
+ 	// mark the skb with bearer id
+ 	skb->mark = pctx->bearer_id;
  	rcu_read_unlock();
  
  	/* Get rid of the GTP + UDP headers. */
***************
*** 492,501 ****
  	 * Prepend PDP header with TEI/TID from PDP ctx.
  	 */
  	iph = ip_hdr(skb);
! 	pctx = ipv4_pdp_find(gtp, iph->daddr);
  	if (!pctx) {
! 		netdev_dbg(dev, "no PDP ctx found for %pI4, skip\n",
! 			   &iph->daddr);
  		return -ENOENT;
  	}
  	netdev_dbg(dev, "found PDP context %p\n", pctx);
--- 498,507 ----
  	 * Prepend PDP header with TEI/TID from PDP ctx.
  	 */
  	iph = ip_hdr(skb);
! 	pctx = ipv4_ebi_pdp_find(gtp, iph->daddr, (u8)(skb->mark));
  	if (!pctx) {
! 		netdev_dbg(dev, "no PDP ctx found for %pI4 ebi %u, skip\n",
! 			   &iph->daddr, skb->mark);
  		return -ENOENT;
  	}
  	netdev_dbg(dev, "found PDP context %p\n", pctx);
***************
*** 784,791 ****
  {
  	int i;
  
! 	gtp->addr_hash = kmalloc(sizeof(struct hlist_head) * hsize, GFP_KERNEL);
! 	if (gtp->addr_hash == NULL)
  		return -ENOMEM;
  
  	gtp->tid_hash = kmalloc(sizeof(struct hlist_head) * hsize, GFP_KERNEL);
--- 790,797 ----
  {
  	int i;
  
! 	gtp->addr_ebi_hash = kmalloc(sizeof(struct hlist_head) * hsize, GFP_KERNEL);
! 	if (gtp->addr_ebi_hash == NULL)
  		return -ENOMEM;
  
  	gtp->tid_hash = kmalloc(sizeof(struct hlist_head) * hsize, GFP_KERNEL);
***************
*** 795,806 ****
  	gtp->hash_size = hsize;
  
  	for (i = 0; i < hsize; i++) {
! 		INIT_HLIST_HEAD(&gtp->addr_hash[i]);
  		INIT_HLIST_HEAD(&gtp->tid_hash[i]);
  	}
  	return 0;
  err1:
! 	kfree(gtp->addr_hash);
  	return -ENOMEM;
  }
  
--- 801,812 ----
  	gtp->hash_size = hsize;
  
  	for (i = 0; i < hsize; i++) {
! 		INIT_HLIST_HEAD(&gtp->addr_ebi_hash[i]);
  		INIT_HLIST_HEAD(&gtp->tid_hash[i]);
  	}
  	return 0;
  err1:
! 	kfree(gtp->addr_ebi_hash);
  	return -ENOMEM;
  }
  
***************
*** 817,823 ****
  		}
  	}
  	synchronize_rcu();
! 	kfree(gtp->addr_hash);
  	kfree(gtp->tid_hash);
  }
  
--- 823,829 ----
  		}
  	}
  	synchronize_rcu();
! 	kfree(gtp->addr_ebi_hash);
  	kfree(gtp->tid_hash);
  }
  
***************
*** 912,917 ****
--- 918,924 ----
  	case GTP_V1:
  		pctx->u.v1.i_tei = nla_get_u32(info->attrs[GTPA_I_TEI]);
  		pctx->u.v1.o_tei = nla_get_u32(info->attrs[GTPA_O_TEI]);
+ 		pctx->bearer_id = nla_get_u32(info->attrs[GTPA_BEARER_ID]);
  		break;
  	default:
  		break;
***************
*** 921,936 ****
  static int ipv4_pdp_add(struct net_device *dev, struct genl_info *info)
  {
  	struct gtp_dev *gtp = netdev_priv(dev);
! 	u32 hash_ms, hash_tid = 0;
  	struct pdp_ctx *pctx;
  	bool found = false;
  	__be32 ms_addr;
  
  	ms_addr = nla_get_be32(info->attrs[GTPA_MS_ADDRESS]);
! 	hash_ms = ipv4_hashfn(ms_addr) % gtp->hash_size;
  
! 	hlist_for_each_entry_rcu(pctx, &gtp->addr_hash[hash_ms], hlist_addr) {
! 		if (pctx->ms_addr_ip4.s_addr == ms_addr) {
  			found = true;
  			break;
  		}
--- 928,945 ----
  static int ipv4_pdp_add(struct net_device *dev, struct genl_info *info)
  {
  	struct gtp_dev *gtp = netdev_priv(dev);
! 	u32 hash_ms_ebi, hash_tid = 0;
  	struct pdp_ctx *pctx;
  	bool found = false;
  	__be32 ms_addr;
+ 	u8 ebi;
  
  	ms_addr = nla_get_be32(info->attrs[GTPA_MS_ADDRESS]);
! 	ebi = nla_get_u8(info->attrs[GTPA_BEARER_ID]);
! 	hash_ms_ebi = ipv4_ebi_hashfn(ms_addr, ebi) % gtp->hash_size;
  
! 	hlist_for_each_entry_rcu(pctx, &gtp->addr_ebi_hash[hash_ms_ebi], hlist_addr) {
! 		if (pctx->ms_addr_ip4.s_addr == ms_addr && pctx->bearer_id == ebi) {
  			found = true;
  			break;
  		}
***************
*** 948,955 ****
  			netdev_dbg(dev, "GTPv0-U: update tunnel id = %llx (pdp %p)\n",
  				   pctx->u.v0.tid, pctx);
  		else if (pctx->gtp_version == GTP_V1)
! 			netdev_dbg(dev, "GTPv1-U: update tunnel id = %x/%x (pdp %p)\n",
! 				   pctx->u.v1.i_tei, pctx->u.v1.o_tei, pctx);
  
  		return 0;
  
--- 957,964 ----
  			netdev_dbg(dev, "GTPv0-U: update tunnel id = %llx (pdp %p)\n",
  				   pctx->u.v0.tid, pctx);
  		else if (pctx->gtp_version == GTP_V1)
! 			netdev_dbg(dev, "GTPv1-U: update tunnel id = %x/%x ebi %d (pdp %p)\n",
! 				   pctx->u.v1.i_tei, pctx->u.v1.o_tei, ebi, pctx);
  
  		return 0;
  
***************
*** 976,982 ****
  		break;
  	}
  
! 	hlist_add_head_rcu(&pctx->hlist_addr, &gtp->addr_hash[hash_ms]);
  	hlist_add_head_rcu(&pctx->hlist_tid, &gtp->tid_hash[hash_tid]);
  
  	switch (pctx->gtp_version) {
--- 985,991 ----
  		break;
  	}
  
! 	hlist_add_head_rcu(&pctx->hlist_addr, &gtp->addr_ebi_hash[hash_ms_ebi]);
  	hlist_add_head_rcu(&pctx->hlist_tid, &gtp->tid_hash[hash_tid]);
  
  	switch (pctx->gtp_version) {
***************
*** 986,994 ****
  			   &pctx->ms_addr_ip4, pctx);
  		break;
  	case GTP_V1:
! 		netdev_dbg(dev, "GTPv1-U: new PDP ctx id=%x/%x ssgn=%pI4 ms=%pI4 (pdp=%p)\n",
  			   pctx->u.v1.i_tei, pctx->u.v1.o_tei,
! 			   &pctx->sgsn_addr_ip4, &pctx->ms_addr_ip4, pctx);
  		break;
  	}
  
--- 995,1003 ----
  			   &pctx->ms_addr_ip4, pctx);
  		break;
  	case GTP_V1:
! 		netdev_dbg(dev, "GTPv1-U: new PDP ctx id=%x/%x ssgn=%pI4 ms=%pI4 ebi %u (pdp=%p)\n",
  			   pctx->u.v1.i_tei, pctx->u.v1.o_tei,
! 			   &pctx->sgsn_addr_ip4, &pctx->ms_addr_ip4, ebi, pctx);
  		break;
  	}
  
***************
*** 1014,1020 ****
  		break;
  	case GTP_V1:
  		if (!info->attrs[GTPA_I_TEI] ||
! 		    !info->attrs[GTPA_O_TEI])
  			return -EINVAL;
  		break;
  
--- 1023,1030 ----
  		break;
  	case GTP_V1:
  		if (!info->attrs[GTPA_I_TEI] ||
! 		    !info->attrs[GTPA_O_TEI] ||
! 		    !info->attrs[GTPA_BEARER_ID])
  			return -EINVAL;
  		break;
  
***************
*** 1085,1092 ****
  		netdev_dbg(dev, "GTPv0-U: deleting tunnel id = %llx (pdp %p)\n",
  			   pctx->u.v0.tid, pctx);
  	else if (pctx->gtp_version == GTP_V1)
! 		netdev_dbg(dev, "GTPv1-U: deleting tunnel id = %x/%x (pdp %p)\n",
! 			   pctx->u.v1.i_tei, pctx->u.v1.o_tei, pctx);
  
  	hlist_del_rcu(&pctx->hlist_tid);
  	hlist_del_rcu(&pctx->hlist_addr);
--- 1095,1102 ----
  		netdev_dbg(dev, "GTPv0-U: deleting tunnel id = %llx (pdp %p)\n",
  			   pctx->u.v0.tid, pctx);
  	else if (pctx->gtp_version == GTP_V1)
! 		netdev_dbg(dev, "GTPv1-U: deleting tunnel id = %x/%x ebi %u (pdp %p)\n",
! 			   pctx->u.v1.i_tei, pctx->u.v1.o_tei, pctx->bearer_id, pctx);
  
  	hlist_del_rcu(&pctx->hlist_tid);
  	hlist_del_rcu(&pctx->hlist_addr);
***************
*** 1127,1133 ****
  		break;
  	case GTP_V1:
  		if (nla_put_u32(skb, GTPA_I_TEI, pctx->u.v1.i_tei) ||
! 		    nla_put_u32(skb, GTPA_O_TEI, pctx->u.v1.o_tei))
  			goto nla_put_failure;
  		break;
  	}
--- 1137,1144 ----
  		break;
  	case GTP_V1:
  		if (nla_put_u32(skb, GTPA_I_TEI, pctx->u.v1.i_tei) ||
! 		    nla_put_u32(skb, GTPA_O_TEI, pctx->u.v1.o_tei) ||
! 		    nla_put_u8(skb, GTPA_BEARER_ID, pctx->bearer_id))
  			goto nla_put_failure;
  		break;
  	}
***************
*** 1188,1197 ****
  		u32 tid = nla_get_u32(info->attrs[GTPA_I_TEI]);
  
  		pctx = gtp1_pdp_find(gtp, tid);
  	} else if (info->attrs[GTPA_MS_ADDRESS]) {
  		__be32 ip = nla_get_be32(info->attrs[GTPA_MS_ADDRESS]);
  
! 		pctx = ipv4_pdp_find(gtp, ip);
  	}
  
  	if (pctx == NULL) {
--- 1199,1213 ----
  		u32 tid = nla_get_u32(info->attrs[GTPA_I_TEI]);
  
  		pctx = gtp1_pdp_find(gtp, tid);
+ 	} else if (info->attrs[GTPA_MS_ADDRESS] && info->attrs[GTPA_BEARER_ID] && gtp_version == GTP_V1) {
+ 		__be32 ip = nla_get_be32(info->attrs[GTPA_MS_ADDRESS]);
+ 		u8 ebi = nla_get_u8(info->attrs[GTPA_BEARER_ID]);
+ 
+ 		pctx = ipv4_ebi_pdp_find(gtp, ip, ebi);
  	} else if (info->attrs[GTPA_MS_ADDRESS]) {
  		__be32 ip = nla_get_be32(info->attrs[GTPA_MS_ADDRESS]);
  
! 		pctx = ipv4_ebi_pdp_find(gtp, ip, 0);
  	}
  
  	if (pctx == NULL) {
***************
*** 1274,1279 ****
--- 1290,1296 ----
  	[GTPA_NET_NS_FD]	= { .type = NLA_U32, },
  	[GTPA_I_TEI]		= { .type = NLA_U32, },
  	[GTPA_O_TEI]		= { .type = NLA_U32, },
+ 	[GTPA_BEARER_ID]	= { .type = NLA_U8, },
  };
  
  static const struct genl_ops gtp_genl_ops[] = {
***************
*** 1345,1351 ****
  	if (err < 0)
  		goto unreg_genl_family;
  
! 	pr_info("GTP module loaded (pdp ctx size %Zd bytes)\n",
  		sizeof(struct pdp_ctx));
  	return 0;
  
--- 1362,1368 ----
  	if (err < 0)
  		goto unreg_genl_family;
  
! 	pr_info("GTP module loaded (pdp ctx size %Zd bytes) modified for EPS dedicated bearer (Proof of Concept)\n",
  		sizeof(struct pdp_ctx));
  	return 0;
  
diff -rcNP linux-4.7-rc7/include/uapi/linux/gtp.h linux-4.7-rc7.patch_dedicated_bearer/include/uapi/linux/gtp.h
*** linux-4.7-rc7/include/uapi/linux/gtp.h	2016-07-11 05:24:59.000000000 +0200
--- linux-4.7-rc7.patch_dedicated_bearer/include/uapi/linux/gtp.h	2017-02-10 08:53:41.504427748 +0100
***************
*** 25,30 ****
--- 25,31 ----
  	GTPA_NET_NS_FD,
  	GTPA_I_TEI,	/* for GTPv1 only */
  	GTPA_O_TEI,	/* for GTPv1 only */
+ 	GTPA_BEARER_ID,	/* for GTPv1 only */
  	GTPA_PAD,
  	__GTPA_MAX,
  };
