################################################################################
# Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The OpenAirInterface Software Alliance licenses this file to You under 
# the Apache License, Version 2.0  (the "License"); you may not use this file
# except in compliance with the License.  
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the OpenAirInterface (OAI) Software Alliance:
#      contact@openairinterface.org
################################################################################
S-GW : 
{
    NETWORK_INTERFACES : 
    {
        # S-GW binded interface for S11 communication (GTPV2-C), if none selected the ITTI message interface is used
        SGW_INTERFACE_NAME_FOR_S11              = "lo";                         # STRING, interface name, YOUR NETWORK CONFIG HERE
        SGW_IPV4_ADDRESS_FOR_S11                = "127.0.11.2/8";               # STRING, CIDR, YOUR NETWORK CONFIG HERE

        # S-GW binded interface for S1-U communication (GTPV1-U) can be ethernet interface, virtual ethernet interface, we don't advise wireless interfaces
        SGW_INTERFACE_NAME_FOR_S1U_S12_S4_UP    = "eth0";                       # STRING, interface name, YOUR NETWORK CONFIG HERE, USE "lo" if S-GW run on eNB host
        SGW_IPV4_ADDRESS_FOR_S1U_S12_S4_UP      = "192.168.11.17/24";           # STRING, CIDR, YOUR NETWORK CONFIG HERE
        SGW_IPV4_PORT_FOR_S1U_S12_S4_UP         = 2152;                         # INTEGER, port number, PREFER NOT CHANGE UNLESS YOU KNOW WHAT YOU ARE DOING

        # S-GW binded interface for S5 or S8 communication, not implemented, so leave it to none
        SGW_INTERFACE_NAME_FOR_S5_S8_UP         = "none";                       # STRING, interface name, DO NOT CHANGE (NOT IMPLEMENTED YET)
        SGW_IPV4_ADDRESS_FOR_S5_S8_UP           = "0.0.0.0/24";                 # STRING, CIDR, DO NOT CHANGE (NOT IMPLEMENTED YET)
    };
    
    INTERTASK_INTERFACE :
    {
        # max queue size per task
        ITTI_QUEUE_SIZE            = 2000000;                                   # INTEGER
    };

    LOGGING :
    {
        # OUTPUT choice in { "CONSOLE", "SYSLOG", `path to file`", "`IPv4@`:`TCP port num`"} 
        # `path to file` must start with '.' or '/'
        # if TCP stream choice, then you can easily dump the traffic on the remote or local host: nc -l `TCP port num` > received.txt
        OUTPUT            = "CONSOLE";                                          # see 3 lines above 
        #OUTPUT            = "SYSLOG";                                          # see 4 lines above 
        #OUTPUT            = "/tmp/spgw.log";                                   # see 5 lines above 
        #OUTPUT            = "127.0.0.1:5656";                                  # see 6 lines above 
        
        # THREAD_SAFE choice in { "yes", "no" } means use of thread safe intermediate buffer then a single thread pick each message log one
        # by one to flush it to the chosen output
        THREAD_SAFE       = "no";
        
        # COLOR choice in { "yes", "no" } means use of ANSI styling codes or no
        COLOR              = "yes";
        
        # Log level choice in { "EMERGENCY", "ALERT", "CRITICAL", "ERROR", "WARNING", "NOTICE", "INFO", "DEBUG", "TRACE"} 
        ASYNC_SYSTEM       = "TRACE";
        UDP_LOG_LEVEL      = "TRACE";
        GTPV1U_LOG_LEVEL   = "TRACE";
        GTPV2C_LOG_LEVEL   = "TRACE";
        SPGW_APP_LOG_LEVEL = "TRACE";
        S11_LOG_LEVEL      = "TRACE";
        UTIL_LOG_LEVEL     = "TRACE";
        ITTI_LOG_LEVEL     = "WARNING";
    };
};

P-GW = 
{
    NETWORK_INTERFACES : 
    {
        # P-GW binded interface for S5 or S8 communication, not implemented, so leave it to none
        PGW_INTERFACE_NAME_FOR_S5_S8          = "none";                         # STRING, interface name, DO NOT CHANGE (NOT IMPLEMENTED YET)

        # P-GW binded interface for SGI (egress/ingress internet traffic)
        PGW_INTERFACE_NAME_FOR_SGI            = "eth3";                         # STRING, YOUR NETWORK CONFIG HERE
        PGW_MASQUERADE_SGI                    = "no";                           # STRING, {"yes", "no"}. YOUR NETWORK CONFIG HERE, will do NAT for you if you put "yes".
        UE_TCP_MSS_CLAMPING                   = "no";                           # STRING, {"yes", "no"}. 
    };
    
    # Pool of UE assigned IP addresses
    # Do not make IP pools overlap
    # first IPv4 address X.Y.Z.1 is reserved for GTP network device on SPGW
    # Normally no more than 16 pools allowed, but since recent GTP kernel module use, only one pool allowed (TODO).
    IP_ADDRESS_POOL :
    {
        IPV4_LIST = (
                      "172.16.0.0/12"                                           # STRING, CIDR, YOUR NETWORK CONFIG HERE.
                    );
    };
    
    # DNS address communicated to UEs
    DEFAULT_DNS_IPV4_ADDRESS     = "8.8.8.8";                                   # YOUR NETWORK CONFIG HERE
    DEFAULT_DNS_SEC_IPV4_ADDRESS = "8.8.4.4";                                   # YOUR NETWORK CONFIG HERE

    # Non standard feature, normally should be set to "no", but you may need to set to yes for UE that do not explicitly request a PDN address through NAS signalling
    FORCE_PUSH_PROTOCOL_CONFIGURATION_OPTIONS = "no";                           # STRING, {"yes", "no"}. 
    UE_MTU                                    = 1500                            # INTEGER
    GTPV1U_REALIZATION                        = "GTP_KERNEL_MODULE";            # STRING {"NO_GTP_KERNEL_AVAILABLE", "GTP_KERNEL_MODULE", "GTP_KERNEL"}. In a container you may not be able to unload/load kernel modules.
        
    PCEF :
    {
      PCEF_ENABLED                            = "yes";                          # STRING, {"yes", "no"}, if yes then all parameters bellow will/should be taken into account
      TRAFFIC_SHAPPING_ENABLED                = "yes";                          # STRING, {"yes", "no"}, TODO, should finally work for egress but only on ingress bearers and not on ingress SDF flows
      TCP_ECN_ENABLED                         = "yes";                          # STRING, {"yes", "no"}, TCP explicit congestion notification
      AUTOMATIC_PUSH_DEDICATED_BEARER_PCC_RULE= 0;                              # INTEGER [ 0..n], SDF identifier (Please check with enum sdf_id_t in pgw_pcef_emulation.h,
                                                                                # !!!!!!!!!!!!  BE CAREFULL, EXPERIMENTAL !!!!!!!!!!!!!!! may need to be updated, and some are not available ) 
                                                                                # 0  = No push of dedicated bearer
                                                                                # 17  = SDF_ID_GBR_VOLTE_16K,                     // see corresponding TFT and QOS params in pgw_pcef_emulation.h
                                                                                # 18  = SDF_ID_GBR_VOLTE_24K,                     // see corresponding TFT and QOS params in pgw_pcef_emulation.h
                                                                                # 19  = SDF_ID_GBR_VOLTE_40K,                     // see corresponding TFT and QOS params in pgw_pcef_emulation.h
                                                                                # 20  = SDF_ID_GBR_VOLTE_64K,                     // see corresponding TFT and QOS params in pgw_pcef_emulation.h
                                                                                # 21  = SDF_ID_GBR_VILTE_192K,                    // see corresponding TFT and QOS params in pgw_pcef_emulation.h
                                                                                # 22  = SDF_ID_GBR_VILTE_384K,                    // see corresponding TFT and QOS params in pgw_pcef_emulation.h
                                                                                # 23  = SDF_ID_GBR_VILTE_768K,                    // see corresponding TFT and QOS params in pgw_pcef_emulation.h
                                                                                # 24  = SDF_ID_GBR_VILTE_2M,                      // see corresponding TFT and QOS params in pgw_pcef_emulation.h
                                                                                # 25  = SDF_ID_GBR_VILTE_4M,                      // see corresponding TFT and QOS params in pgw_pcef_emulation.h
                                                                                # 26 = SDF_ID_GBR_NON_CONVERSATIONAL_VIDEO_256K, // see corresponding TFT and QOS params in pgw_pcef_emulation.h
                                                                                # 27 = SDF_ID_GBR_NON_CONVERSATIONAL_VIDEO_512K, // see corresponding TFT and QOS params in pgw_pcef_emulation.h
                                                                                # 28 = SDF_ID_GBR_NON_CONVERSATIONAL_VIDEO_1M,   // see corresponding TFT and QOS params in pgw_pcef_emulation.h
                                                                                # 29 = SDF_ID_NGBR_IMS_SIGNALLING,               // see corresponding TFT and QOS params in pgw_pcef_emulation.h
                                                                                # 30 = SDF_ID_NGBR_DEFAULT_PREMIUM,              // see corresponding TFT and QOS params in pgw_pcef_emulation.h
                                                                                # 31 = SDF_ID_NGBR_DEFAULT,                      // see corresponding TFT and QOS params in pgw_pcef_emulation.h
                                                                                # 32 = SDF_ID_TEST_PING                          // see corresponding TFT and QOS params in pgw_pcef_emulation.h
                                                                                
      DEFAULT_BEARER_STATIC_PCC_RULE = 31;                                      # SDF identifier for default bearer                                   
      PUSH_STATIC_PCC_RULES = (31);                                             # List of SDF identifiers  
                                                                                    
      # Waiting for HSS APN-AMBR IE ...
      APN_AMBR_UL                             = 500000;                         # Maximum UL bandwidth that can be used by non guaranteed bit rate traffic in Kbits/seconds.
      APN_AMBR_DL                             = 500000;                         # Maximum DL bandwidth that can be used by non guaranteed bit rate traffic in Kbits/seconds.
    };
};


