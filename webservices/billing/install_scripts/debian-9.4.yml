---
- hosts: localhost
  vars:
    coltenv: "{{ ansible_env.COLTENV }}"
    build_billing: "{{ ansible_env.COLTE_BILLING }}"
    username: "{{ ansible_env.COLTE_USER }}"
    mysql_password: "{{ ansible_env.COLTE_DBPASS }}"
    colte_dir: "{{ ansible_env.COLTE_DIR }}"
    billing_dir: "{{ colte_dir }}/webservices/billing"

    wan_iface: "{{ ansible_env.COLTE_WAN_IFACE }}"
    lan_subnet: "{{ ansible_env.COLTE_LTE_SUBNET }}"

# step 1: setup/configure/run netopng (DON'T FORGET MY LUA SCRIPT AND TO DO SUBNET CASTING)
  tasks:
    - name: check for environment vars
      fail: msg="Killing ansible script, environment variables not set! COLTENV = {{ ansible_env.COLTENV }}"
      when: coltenv is not defined
        
    - name: manually download ntopng.deb
      apt: 
        deb: http://apt-stable.ntop.org/stretch/all/apt-ntop-stable.deb
      become: yes

    - name: apt-get update
      apt:
        autoclean: yes
        update_cache: yes
      become: yes   

    - name: install new linux headers (Debian needs this)
      apt:
        name: "{{ item }}"
      become: yes 
      with_items:
      - linux-headers-4.9.0-4-amd64

    - name: install ntopng and friends
      apt:
        name: "{{ item }}"
      become: yes 
      with_items:
      - pfring
      - nprobe
      - ntopng
      - ntopng-data
      - n2disk
      - cento

    - name: change ntopng admin password
      shell: redis-cli SET ntopng.user.admin.password c67a0c16955c2629b51e94101b8639c0

    - name: dynamically write ntopng.conf
      lineinfile:
        path: "{{ billing_dir }}/ntopng.conf"
        regexp: "{{ item.key }}"
        line: "{{ item.value }}"
      with_items:
      - {key: "-i=", value: "-i={{ wan_iface }}"}
      - {key: "-m=", value: "-m={{ lan_subnet }}"}

    - name: dynamically write lua script with subnet
      lineinfile:
        path: "{{ billing_dir }}/colte_log_bandwidth.lua"
        regexp: "{{ item.key }}"
        line: "{{ item.value }}"
      with_items:
      - {key: "my_subnet =", value: "my_subnet = \"{{ lan_subnet }}\""}

    - name: copy ntopng.conf to /etc/ntopng.conf
      copy: 
        src: "{{ billing_dir }}/ntopng.conf"
        dest: /etc/ntopng/ntopng.conf
        mode: 0644
      become: yes

    - name: copy my lua script to ntopng
      copy: 
        src: "{{ billing_dir }}/colte_log_bandwidth.lua"
        dest: /usr/share/ntopng/scripts/lua/colte_log_bandwidth.lua
        mode: 0644
      become: yes

# step 2: setup/install mysql db
    - name: apt-get install mysql
      apt:
        name: "{{ item }}"
      become: yes 
      with_items:
      - python-mysqldb
      - mysql-client
      - mysql-server
#      - libmysql-client-dev

    - name: mysql configs
      mysql_user:
        name: "{{ username }}"
        password: "{{ mysql_password }}"
        host: localhost
        priv: '*.*:ALL'
        #login_password: research
      become: yes

    - name: install billing table into mysql
      mysql_db:
        login_user: "{{ username }}"
        login_password: "{{ mysql_password }}"
        name: colte_db
        state: import
        target: "{{ billing_dir }}/customer_db.sql"

    - name: ensure log directory exists
      file:
        path: /var/log/colte
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: 0755
      become: yes

    - name: synchronize customer_db with oai users_db
      shell: "python {{ billing_dir }}/synchronize_dbs.py"

# step 3: schedule chron job for "import_to_db.py"
    - name: Install job on crontab
      cron:
        name: "Import bandwidth numbers from ntopng to billing db"
        minute: "*/5"
        job: "{{ billing_dir }}/import_to_db.sh >> /var/log/colte/cron.log 2>&1"
        user: "{{ username }}"
        disabled: "no"

# OTHER CONSIDERATIONS:
# - if we get a weird result from .py, or if netopng crashes, we need to shut off the entire network (lest people use it for free)
# can we somehow monitor this?
