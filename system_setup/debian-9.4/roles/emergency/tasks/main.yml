# This script is to be run on the actual host machine (i.e. no Vagrant BS here.)
# It installs/configures Apache and Docker, then sets up and turns on all the services one-by-one
# If you don't want a specific webservice just comment out the appropriate include_tasks.yml file

---
  # # install/config a BIND zone for ".emergency"
  # - name: copy emergency zone pointer into named.conf.local
  #   blockinfile:
  #     path: "/etc/bind/named.conf.local"
  #     block: |
  #       zone "emergency" {
  #         type master;
  #         file "/etc/bind/zones/db.emergency";
  #       };
  #   become: yes

  # - name: copy bind zonefile
  #   copy: 
  #     src: "{{ emergency_dir }}/zone_db"
  #     dest: "/etc/bind/zones/db.emergency"
  #   become: yes

  # - name: restart bind9
  #   service: name=bind9 state=restarted
  #   become: yes

####### HOMEPAGE ############
  - name: create emergencell directory
    file:
      src: "{{ emergency_dir }}/homepage/"
      dest: "/var/www/emergencell"
      state: link
    become: yes

  - name: write information to homepage.conf
    lineinfile:
      dest: "{{ emergency_dir }}/homepage.conf"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    with_items:
    - {field: "server_name", line: "  server_name home.{{ network_name }};"}

  - name: copy website configuration file
    copy:
      src: "{{ emergency_dir }}/homepage.conf"
      dest: "/etc/nginx/sites-available/emergencell_homepage"
    become: yes

  - name: symlink website into sites-enabled
    file:
      src: "/etc/nginx/sites-available/emergencell_homepage"
      dest: "/etc/nginx/sites-enabled/emergencell_homepage"
      state: link
    become: yes

  - name: restart nginx
    service: name=nginx state=reloaded
    become: yes

####### EMERGENCY REGISTRATION SERVICE ############
  - name: install pip
    apt:
      name: python-pip
    become: yes

  - name: install django
    pip:
      name: "{{ item }}"
    with_items:
    - django
    - django-ipware

# step 1: dynamically populate registry.service (IF NEEDED?!?)
  - name: dynamically write registry.service
    lineinfile:
      dest: "{{ emergency_dir }}/registry/registry.service"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
      owner: "{{ username }}"
      group: "{{ username }}"
    with_items:
    - {field: "ExecStart", line: "ExecStart=/bin/bash -c \"python {{ emergency_dir }}/registry/manage.py runserver 9083 >> /var/log/colte/emergencell_registry.log 2>&1\""}
    - {field: "User", line: "User={{ username }}"}
    - {field: "Group", line: "Group={{ username }}"}
    - {field: "WorkingDirectory", line: "WorkingDirectory={{ emergency_dir }}/registry"}

  - name: copy registry.service to /etc/systemd/system
    copy: 
      src: "{{ emergency_dir }}/registry/registry.service"
      dest: "/etc/systemd/system/emergencell_registry.service"
      mode: 0644
    become: yes

  - name: start registry via systemd
    systemd: state=started name=emergencell_registry
    become: yes

  - name: write information to registry.conf
    lineinfile:
      dest: "{{ emergency_dir }}/registry.conf"
      regexp: "{{ item.field }}"
      line: "{{ item.line }}"
    with_items:
    - {field: "server_name", line: "  server_name register.{{ network_name }};"}

  - name: copy website configuration file
    copy:
      src: "{{ emergency_dir }}/registry.conf"
      dest: "/etc/nginx/sites-available/registry"
    become: yes

  - name: symlink website into sites-enabled
    file:
      src: "/etc/nginx/sites-available/registry"
      dest: "/etc/nginx/sites-enabled/registry"
      state: link
    become: yes

  - name: restart nginx
    service: name=nginx state=reloaded
    become: yes

